import { PoolClient, Pool, QueryResultRow, QueryResult } from "pg";
import { Logger } from "./logger";
import { Release } from "./runner";
export declare type WithPgClient = <T = void>(callback: (pgClient: PoolClient) => Promise<T>) => Promise<T>;
/**
 * The `addJob` interface is implemented in many places in the library, all
 * conforming to this.
 */
export declare type AddJobFunction = (
/**
 * The name of the task that will be executed for this job.
 */
identifier: string, 
/**
 * The payload (typically a JSON object) that will be passed to the task executor.
 */
payload?: any, 
/**
 * Additional details about how the job should be handled.
 */
spec?: TaskSpec) => Promise<Job>;
export interface Helpers {
    /**
     * A Logger instance.
     */
    logger: Logger;
    /**
     * Grabs a PostgreSQL client from the pool, awaits your callback, then
     * releases the client back to the pool.
     */
    withPgClient: WithPgClient;
    /**
     * Adds a job into our queue.
     */
    addJob: AddJobFunction;
}
export interface JobHelpers extends Helpers {
    /**
     * A Logger instance, scoped to this job.
     */
    logger: Logger;
    /**
     * The currently executing job.
     */
    job: Job;
    /**
     * A shorthand for running an SQL query within the job.
     */
    query<R extends QueryResultRow = any>(queryText: string, values?: any[]): Promise<QueryResult<R>>;
}
/**
 * Utilities for working with Graphile Worker. Primarily useful for migrating
 * the jobs database and queueing jobs.
 */
export interface WorkerUtils extends Helpers {
    /**
     * A Logger instance, scoped to label: 'WorkerUtils'
     */
    logger: Logger;
    /**
     * Use this to release the WorkerUtils when you no longer need it.
     * Particularly useful in tests, or in short-running scripts.
     */
    release: Release;
    /**
     * Migrate the database schema to the latest version.
     */
    migrate: () => Promise<void>;
}
export declare type Task = (payload: unknown, helpers: JobHelpers) => void | Promise<void>;
export declare function isValidTask(fn: unknown): fn is Task;
export interface TaskList {
    [name: string]: Task;
}
export interface WatchedTaskList {
    tasks: TaskList;
    release: () => void;
}
export interface Job {
    id: string;
    queue_name: string;
    task_identifier: string;
    payload: unknown;
    priority: number;
    run_at: Date;
    attempts: number;
    last_error: string | null;
    created_at: Date;
    updated_at: Date;
}
export interface Worker {
    nudge: () => boolean;
    workerId: string;
    release: () => void;
    promise: Promise<void>;
    getActiveJob: () => Job | null;
}
export interface WorkerPool {
    release: () => Promise<void>;
    gracefulShutdown: (message: string) => Promise<void>;
    promise: Promise<void>;
}
export interface Runner {
    stop: () => Promise<void>;
    addJob: AddJobFunction;
    promise: Promise<void>;
}
export interface TaskSpec {
    /**
     * The queue to run this task under
     */
    queueName?: string;
    /**
     * A Date to schedule this task to run in the future
     */
    runAt?: Date;
    /**
     * How many retries should this task get? (Default: 25)
     */
    maxAttempts?: number;
    /**
     * Unique identifier for the job, can be used to update or remove it later if needed
     */
    jobKey?: string;
}
export interface WorkerSharedOptions {
    /**
     * How long to wait between polling for jobs in milliseconds (for jobs scheduled in the future/retries)
     */
    pollInterval?: number;
    /**
     * How should messages be logged out? Defaults to using the console logger.
     */
    logger?: Logger;
}
export interface WorkerOptions extends WorkerSharedOptions {
    /**
     * An identifier for this specific worker; if unset then a random ID will be assigned. Do not assign multiple workers the same worker ID!
     */
    workerId?: string;
}
export interface WorkerPoolOptions extends WorkerSharedOptions {
    /**
     * Number of jobs to run concurrently
     */
    concurrency?: number;
}
export interface RunnerOptions extends WorkerPoolOptions {
    /**
     * Task names and handler, e.g. from `getTasks` (use this if you need watch mode)
     */
    taskList?: TaskList;
    /**
     * Each file in this directory will be used as a task handler
     */
    taskDirectory?: string;
    /**
     * A PostgreSQL connection string to the database containing the job queue
     */
    connectionString?: string;
    /**
     * A pg.Pool instance to use instead of the `connectionString`
     */
    pgPool?: Pool;
    /**
     * The maximum size of the PostgreSQL pool. Defaults to the node-postgres
     * default (10).
     */
    maxPoolSize?: number;
}
export interface WorkerUtilsOptions {
    /**
     * A PostgreSQL connection string to the database containing the job queue
     */
    connectionString?: string;
    /**
     * A pg.Pool instance to use instead of the `connectionString`
     */
    pgPool?: Pool;
    /**
     * How should messages be logged out? Defaults to using the console logger.
     */
    logger?: Logger;
}
